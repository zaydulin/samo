# Generated by Django 4.1.7 on 2025-08-08 18:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import useraccount.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Ученик'), (1, 'Учитель'), (2, 'Модератор')], default=0, null=True, verbose_name='Тип пользователя')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=500, null=True, unique=True, verbose_name='Телефон')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('avatar', models.FileField(blank=True, default='default/user-nophoto.png', null=True, upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Аватар')),
                ('device_token', models.TextField(blank=True, null=True, verbose_name='FCM токен устройства')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Мужской'), (2, 'Женский')], default=1, null=True, verbose_name='Пол')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('online', models.BooleanField(default=False, verbose_name='Онлайн')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('earned', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Заработано')),
                ('balance', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Баланс')),
                ('frozen', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Замороженный баланс')),
                ('point', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Баллы')),
                ('referral_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Личный код')),
                ('passport_issued_by_whom', models.TextField(blank=True, null=True, verbose_name='Кем выдан')),
                ('passport_date_of_issue', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('passport_the_sub_division_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код подрозделения')),
                ('passport_series_and_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Серия и номер')),
                ('passport_place_of_birth', models.TextField(blank=True, null=True, verbose_name='Место рождения')),
                ('passport_registration', models.TextField(blank=True, null=True, verbose_name='Прописка')),
                ('passport_image_1', models.FileField(blank=True, default='default/user-nophoto.png', null=True, upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Лицевая часть')),
                ('passport_image_2', models.FileField(blank=True, default='default/user-nophoto.png', null=True, upload_to=useraccount.models.get_user_dir, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'webp', 'jpeg', 'jpg', 'svg'])], verbose_name='Место прописки')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название организации')),
                ('company_director', models.CharField(blank=True, max_length=100, null=True, verbose_name='Руководитель')),
                ('company_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Юридический адрес')),
                ('company_nalogovaya', models.CharField(blank=True, max_length=100, null=True, verbose_name='Налоговый орган')),
                ('company_ogrn', models.CharField(blank=True, max_length=100, null=True, verbose_name='ОГРН')),
                ('company_inn', models.CharField(blank=True, max_length=100, null=True, verbose_name='ИНН')),
                ('company_kpp', models.CharField(blank=True, max_length=100, null=True, verbose_name='КПП')),
                ('company_data_registration', models.DateField(blank=True, null=True, verbose_name='Дата регистрации')),
                ('company_type_activity', models.TextField(blank=True, null=True, verbose_name='Основной вид деятельности')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('referral', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Групповой'), (2, 'Личные')], default=1, verbose_name='Тип')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('administrators', models.ManyToManyField(related_name='chatadministrators', to=settings.AUTH_USER_MODEL, verbose_name='Администраторы')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatowner', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('users', models.ManyToManyField(related_name='chatusers', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи')),
            ],
            options={
                'verbose_name': 'Чат',
                'verbose_name_plural': 'Чаты',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('status', models.SmallIntegerField(choices=[(0, 'Отправлено'), (1, 'Прочитано')], default=1, editable=False, verbose_name='Статус')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата')),
                ('content', models.TextField(verbose_name='Сообщение')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatmessage', to='useraccount.chat', verbose_name='Чат')),
                ('views', models.ManyToManyField(related_name='viewsmessage', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Withdrawal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.CharField(blank=True, max_length=250, null=True, verbose_name='Сумма')),
                ('type', models.SmallIntegerField(choices=[(0, 'Пополнение'), (1, 'Списание')], default=0, verbose_name='Пополнение/Списание')),
                ('status', models.SmallIntegerField(choices=[(0, 'Поданна заявка'), (1, 'Выполнено')], default=0, verbose_name='Статус')),
                ('create', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Выплата',
                'verbose_name_plural': 'Выплаты',
            },
        ),
        migrations.CreateModel(
            name='UserSessionBridge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(blank=True, null=True, verbose_name='URL')),
                ('time', models.PositiveIntegerField(blank=True, null=True, verbose_name='Время')),
                ('date', models.CharField(max_length=150, verbose_name='date')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Тайминг модератора2',
                'verbose_name_plural': 'Тайминги модераторов2',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Информация')),
                ('month', models.TextField(blank=True, null=True, verbose_name='Месяц')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Тайминг модератора',
                'verbose_name_plural': 'Тайминги модераторов',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создание')),
                ('data', models.DateField(verbose_name='Дата')),
                ('time_start', models.TimeField(verbose_name='Время начало')),
                ('time_end', models.TimeField(verbose_name='Время конца')),
                ('name', models.CharField(max_length=250, verbose_name='Название')),
                ('description', models.TextField(db_index=True, verbose_name='Описание')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'График',
                'verbose_name_plural': 'Графики',
            },
        ),
        migrations.CreateModel(
            name='Notificationgroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')),
                ('message', models.TextField()),
                ('slug', models.TextField(editable=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Груповое уведомление',
                'verbose_name_plural': 'Груповые уведомления',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Регистрация'), (2, 'Покупка'), (3, 'Сбросить пароль'), (4, 'Рассылка')], default=1, verbose_name='Тип')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Не прочитан'), (2, 'Прочитан')], default=1, verbose_name='Статус')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')),
                ('message', models.TextField()),
                ('slug', models.TextField(editable=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создание')),
                ('period', models.DateField(verbose_name='Периуд')),
                ('name', models.CharField(max_length=250, verbose_name='Название')),
                ('description', models.TextField(db_index=True, verbose_name='Описание')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Личная запись',
                'verbose_name_plural': 'Личные записи',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время просмотра')),
                ('content_type', models.ForeignKey(limit_choices_to={'model__in': ('blogs', 'course')}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'История',
                'verbose_name_plural': 'История',
            },
        ),
        migrations.CreateModel(
            name='ChatMessageMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='chat_message_media_upload_to/%Y/%m/%d/')),
                ('filename', models.CharField(blank=True, max_length=250, null=True, verbose_name='Имя')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatmessagemedia', to='useraccount.chatmessage')),
            ],
            options={
                'verbose_name': 'Файл сообщений чата',
                'verbose_name_plural': 'Файлы сообщений чата',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(limit_choices_to={'model__in': ('blogs', 'course')}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Закладка',
                'verbose_name_plural': 'Закладки',
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
    ]
